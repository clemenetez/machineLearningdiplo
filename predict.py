import torch
import cv2
import numpy as np
from models.edsr import EDSR  
from config import Config
import os
from tqdm import tqdm

def extract_patches(image, patch_size=48, overlap=8):
    """–í–∏—Ä—ñ–∑–∞—î –ø–∞—Ç—á—ñ –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –ø–µ—Ä–µ–∫—Ä–∏—Ç—Ç—è–º"""
    patches = []
    positions = []
    
    h, w = image.shape[:2]
    
    # –Ø–∫—â–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–µ–Ω—à–µ –∑–∞ –ø–∞—Ç—á, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ —Ü—ñ–ª–∫–æ–º
    if h < patch_size or w < patch_size:
        # –ó–±—ñ–ª—å—à—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–æ —Ä–æ–∑–º—ñ—Ä—É –ø–∞—Ç—á–∞
        resized_image = cv2.resize(image, (patch_size, patch_size))
        patches.append(resized_image)
        positions.append((0, 0))
        return patches, positions
    
    # –î–ª—è –º–∞–ª–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–µ–Ω—à–∏–π overlap
    if h < patch_size * 2 or w < patch_size * 2:
        overlap = 4
    
    for y in range(0, h - patch_size + 1, patch_size - overlap):
        for x in range(0, w - patch_size + 1, patch_size - overlap):
            patch = image[y:y+patch_size, x:x+patch_size]
            if patch.shape[:2] == (patch_size, patch_size):
                patches.append(patch)
                positions.append((x, y))
    
    # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏—Ä—ñ–∑–∞—Ç–∏ –ø–∞—Ç—á—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤—Å–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    if len(patches) == 0:
        resized_image = cv2.resize(image, (patch_size, patch_size))
        patches.append(resized_image)
        positions.append((0, 0))
    
    return patches, positions

def reconstruct_from_patches(patches, positions, original_shape, patch_size=48, upscale_factor=2, overlap=8):
    """–í—ñ–¥–Ω–æ–≤–ª—é—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –ø–∞—Ç—á—ñ–≤"""
    h, w = original_shape[:2]
    
    # –Ø–∫—â–æ –±—É–≤ —Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω –ø–∞—Ç—á, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –π–æ–≥–æ
    if len(patches) == 1:
        return cv2.resize(patches[0], (w * upscale_factor, h * upscale_factor))
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–æ–∑–º—ñ—Ä –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ –ø–∞—Ç—á–∞
    enhanced_patch_size = patch_size * upscale_factor
    
    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ä–µ–∑—É–ª—å—Ç—É—é—á–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    result_h = h * upscale_factor
    result_w = w * upscale_factor
    
    result = np.zeros((result_h, result_w, 3), dtype=np.float32)
    count = np.zeros((result_h, result_w), dtype=np.float32)
    
    for patch, (x, y) in zip(patches, positions):
        # –ú–∞—Å—à—Ç–∞–±—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç—É—é—á–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        result_x = x * upscale_factor
        result_y = y * upscale_factor
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º–µ–∂—ñ
        if (result_y + enhanced_patch_size <= result_h and 
            result_x + enhanced_patch_size <= result_w):
            result[result_y:result_y+enhanced_patch_size, 
                   result_x:result_x+enhanced_patch_size] += patch
            count[result_y:result_y+enhanced_patch_size, 
                  result_x:result_x+enhanced_patch_size] += 1
    
    # –£—Å–µ—Ä–µ–¥–Ω—é—î–º–æ –ø–µ—Ä–µ–∫—Ä–∏–≤–∞—é—á—ñ –æ–±–ª–∞—Å—Ç—ñ
    count[count == 0] = 1  # –£–Ω–∏–∫–∞—î–º–æ –¥—ñ–ª–µ–Ω–Ω—è –Ω–∞ –Ω—É–ª—å
    result = result / count[..., np.newaxis]
    
    return result.astype(np.uint8)

def upscale_image_patches(model, lr_image_path, output_path, device, patch_size=48, upscale_factor=2):
    """–ü–æ–∫—Ä–∞—â—É—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –æ–±—Ä–æ–±–ª—è—é—á–∏ –π–æ–≥–æ –ø–æ –ø–∞—Ç—á–∞—Ö"""
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    lr_img = cv2.imread(lr_image_path)
    if lr_img is None:
        raise FileNotFoundError(f"–§–∞–π–ª {lr_image_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
    
    original_shape = lr_img.shape
    print(f"–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä: {original_shape}")
    
    # –í–∏—Ä—ñ–∑–∞—î–º–æ –ø–∞—Ç—á—ñ
    patches, positions = extract_patches(lr_img, patch_size)
    print(f"–í–∏—Ä—ñ–∑–∞–Ω–æ {len(patches)} –ø–∞—Ç—á—ñ–≤")
    
    if len(patches) == 0:
        print("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏—Ä—ñ–∑–∞—Ç–∏ –ø–∞—Ç—á—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–º–µ–Ω—à–∏—Ç–∏ —Ä–æ–∑–º—ñ—Ä –ø–∞—Ç—á–∞.")
        return
    
    # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–µ–Ω –ø–∞—Ç—á
    enhanced_patches = []
    
    with torch.no_grad():
        for patch in tqdm(patches, desc="–û–±—Ä–æ–±–∫–∞ –ø–∞—Ç—á—ñ–≤"):
            # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ç—á–∞
            patch_tensor = torch.tensor(patch, dtype=torch.float32).permute(2, 0, 1)
            patch_tensor = (patch_tensor / 127.5) - 1.0
            patch_tensor = patch_tensor.unsqueeze(0).to(device)
            
            # –ü–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è
            enhanced_tensor = model(patch_tensor)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –Ω–∞–∑–∞–¥
            enhanced_tensor = enhanced_tensor.squeeze().permute(1, 2, 0).cpu().numpy()
            enhanced_patch = (enhanced_tensor * 127.5 + 127.5).astype(np.uint8)
            
            enhanced_patches.append(enhanced_patch)
    
    # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    enhanced_image = reconstruct_from_patches(enhanced_patches, positions, original_shape, patch_size, upscale_factor)
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    cv2.imwrite(output_path, enhanced_image)
    print(f"–ü–æ–∫—Ä–∞—â–µ–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {output_path}")
    
    return enhanced_image

def upscale_image_simple(model, lr_image_path, output_path, device):
    """–ü—Ä–æ—Å—Ç–∏–π –º–µ—Ç–æ–¥ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –≤—Å—å–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (–¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è)"""
    
    lr_img = cv2.imread(lr_image_path)
    if lr_img is None:
        raise FileNotFoundError(f"–§–∞–π–ª {lr_image_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")

    # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    lr_tensor = torch.tensor(lr_img, dtype=torch.float32).permute(2, 0, 1)  
    lr_tensor = (lr_tensor / 127.5) - 1.0  
    lr_tensor = lr_tensor.unsqueeze(0).to(device)  

    # –ü–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è
    with torch.no_grad():
        hr_tensor = model(lr_tensor)

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    hr_tensor = (hr_tensor.squeeze().permute(1, 2, 0).cpu().numpy())  
    hr_image = (hr_tensor * 127.5 + 127.5).astype(np.uint8)  

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    cv2.imwrite(output_path, hr_image)
    print(f"–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {output_path}")

def create_comparison(original_path, enhanced_path, output_path):
    """–°—Ç–≤–æ—Ä—é—î –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–∞ –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å"""
    original = cv2.imread(original_path)
    enhanced = cv2.imread(enhanced_path)
    
    if original is None or enhanced is None:
        print("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è")
        return
    
    # –ó–º–µ–Ω—à—É—î–º–æ —Ä–æ–∑–º—ñ—Ä –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    height = min(original.shape[0], enhanced.shape[0], 400)
    width = min(original.shape[1], enhanced.shape[1], 600)
    
    original_resized = cv2.resize(original, (width, height))
    enhanced_resized = cv2.resize(enhanced, (width, height))
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
    comparison = np.hstack([original_resized, enhanced_resized])
    
    # –î–æ–¥–∞—î–º–æ –ø—ñ–¥–ø–∏—Å–∏
    font = cv2.FONT_HERSHEY_SIMPLEX
    cv2.putText(comparison, 'Original', (10, 30), font, 1, (255, 255, 255), 2)
    cv2.putText(comparison, 'Enhanced', (width + 10, 30), font, 1, (255, 255, 255), 2)
    
    cv2.imwrite(output_path, comparison)
    print(f"–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {output_path}")

if __name__ == "__main__":
    cfg = Config()
    
    # –®–ª—è—Ö–∏ –¥–æ —Ñ–∞–π–ª—ñ–≤
    model_path = "results/best_model.pth"  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞–π–∫—Ä–∞—â—É –º–æ–¥–µ–ª—å
    if not os.path.exists(model_path):
        model_path = "results/final_model.pth"  # Fallback –¥–æ —Ñ—ñ–Ω–∞–ª—å–Ω–æ—ó –º–æ–¥–µ–ª—ñ
    
    input_image = "input.jpg"  # –ó–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é
    output_image = "result_enhanced.jpg"
    comparison_image = "comparison.jpg"

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ñ–∞–π–ª—ñ–≤
    if not os.path.exists(model_path):
        print(f"–ü–æ–º–∏–ª–∫–∞: –ú–æ–¥–µ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ {model_path}")
        print("–°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞—Ç—Ä–µ–Ω—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª—å!")
        exit(1)
    
    if not os.path.exists(input_image):
        print(f"–ü–æ–º–∏–ª–∫–∞: –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ {input_image}")
        print("–ü–æ–º—ñ—Å—Ç—ñ—Ç—å –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é –≤ –∫–æ—Ä—ñ–Ω—å –ø—Ä–æ–µ–∫—Ç—É —Ç–∞ –∑–º—ñ–Ω—ñ—Ç—å –Ω–∞–∑–≤—É –≤ —Å–∫—Ä–∏–ø—Ç—ñ")
        exit(1)

    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è —ñ—Å–Ω—É—é—á–æ—ó –º–æ–¥–µ–ª—ñ
    model = EDSR(
        upscale_factor=cfg.UPSCALE_FACTOR,
        num_blocks=cfg.NUM_BLOCKS,
        channels=cfg.CHANNELS
    ).to(cfg.DEVICE)
    
    model.load_state_dict(torch.load(model_path, map_location=cfg.DEVICE))
    model.eval()
    print(f"–ú–æ–¥–µ–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ –∑ {model_path}")
    print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä–∏: UPSCALE_FACTOR={cfg.UPSCALE_FACTOR}, NUM_BLOCKS={cfg.NUM_BLOCKS}, CHANNELS={cfg.CHANNELS}")

    # –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    try:
        enhanced_img = upscale_image_patches(
            model, 
            input_image, 
            output_image, 
            cfg.DEVICE, 
            patch_size=cfg.PATCH_SIZE,
            upscale_factor=cfg.UPSCALE_FACTOR
        )
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
        create_comparison(input_image, output_image, comparison_image)
        
        print("‚úÖ –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏:")
        print(f"  - {output_image}: –ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—è (–∑–±—ñ–ª—å—à–µ–Ω–∞ –≤ 10 —Ä–∞–∑—ñ–≤)")
        print(f"  - {comparison_image}: –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ: {e}")
        print("üí° –°–ø—Ä–æ–±—É–π—Ç–µ:")
        print("  1. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞–∑–≤—É —Ñ–∞–π–ª—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
        print("  2. –ù–∞—Ç—Ä–µ–Ω—É–≤–∞—Ç–∏ –Ω–æ–≤—É –º–æ–¥–µ–ª—å: python train.py")
        print("  3. –ó–º–µ–Ω—à–∏—Ç–∏ —Ä–æ–∑–º—ñ—Ä –ø–∞—Ç—á–∞ –≤ config.py")