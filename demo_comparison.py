import torch
import cv2
import numpy as np
import matplotlib.pyplot as plt
from models.edsr import EDSR
from config import Config
from predict import upscale_image_patches, upscale_image_simple, create_comparison
import os

def demonstrate_patch_vs_traditional():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä—É—î —Ä—ñ–∑–Ω–∏—Ü—é –º—ñ–∂ —Ç—Ä–∞–¥–∏—Ü—ñ–π–Ω–∏–º —Ç–∞ –ø–∞—Ç—á-–±–∞–∑–æ–≤–∞–Ω–∏–º –ø—ñ–¥—Ö–æ–¥–∞–º–∏
    """
    cfg = Config()
    
    # –®–ª—è—Ö–∏ –¥–æ —Ñ–∞–π–ª—ñ–≤
    model_path = "results/best_model.pth"
    if not os.path.exists(model_path):
        model_path = "results/final_model.pth"
    
    input_image = "face.png"
    
    if not os.path.exists(input_image):
        print(f"–¢–µ—Å—Ç–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è {input_image} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ
    model = EDSR(
        upscale_factor=cfg.UPSCALE_FACTOR,
        num_blocks=cfg.NUM_BLOCKS,
        channels=cfg.CHANNELS
    ).to(cfg.DEVICE)
    
    if os.path.exists(model_path):
        model.load_state_dict(torch.load(model_path, map_location=cfg.DEVICE))
        print(f"–ú–æ–¥–µ–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ –∑ {model_path}")
    else:
        print("–ú–æ–¥–µ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞—Ç—Ä–µ–Ω—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª—å!")
        return
    
    model.eval()
    
    print("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä—ñ–∑–Ω–∏—Ü—ñ –ø—ñ–¥—Ö–æ–¥—ñ–≤ ===")
    print("1. –¢—Ä–∞–¥–∏—Ü—ñ–π–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥: —Å—Ç–∏—Å–Ω–µ–Ω–Ω—è –≤—Å—å–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
    print("2. –ü–∞—Ç—á-–±–∞–∑–æ–≤–∞–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥: –≤–∏—Ä—ñ–∑–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ç—á—ñ–≤")
    
    # –¢—Ä–∞–¥–∏—Ü—ñ–π–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥
    print("\n--- –¢—Ä–∞–¥–∏—Ü—ñ–π–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ ---")
    try:
        upscale_image_simple(model, input_image, "result_traditional.jpg", cfg.DEVICE)
        print("‚úì –¢—Ä–∞–¥–∏—Ü—ñ–π–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    except Exception as e:
        print(f"‚úó –ü–æ–º–∏–ª–∫–∞ –≤ —Ç—Ä–∞–¥–∏—Ü—ñ–π–Ω–æ–º—É –ø—ñ–¥—Ö–æ–¥—ñ: {e}")
    
    # –ü–∞—Ç—á-–±–∞–∑–æ–≤–∞–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥
    print("\n--- –ü–∞—Ç—á-–±–∞–∑–æ–≤–∞–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ ---")
    try:
        upscale_image_patches(model, input_image, "result_patches.jpg", cfg.DEVICE, cfg.PATCH_SIZE)
        print("‚úì –ü–∞—Ç—á-–±–∞–∑–æ–≤–∞–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    except Exception as e:
        print(f"‚úó –ü–æ–º–∏–ª–∫–∞ –≤ –ø–∞—Ç—á-–±–∞–∑–æ–≤–∞–Ω–æ–º—É –ø—ñ–¥—Ö–æ–¥—ñ: {e}")
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
    print("\n--- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è ---")
    try:
        create_comparison("result_traditional.jpg", "result_patches.jpg", "comparison_methods.jpg")
        print("‚úì –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ")
    except Exception as e:
        print(f"‚úó –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è: {e}")
    
    print("\n=== –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ ===")
    print("- result_traditional.jpg: –¢—Ä–∞–¥–∏—Ü—ñ–π–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥")
    print("- result_patches.jpg: –ü–∞—Ç—á-–±–∞–∑–æ–≤–∞–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥")
    print("- comparison_methods.jpg: –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –º–µ—Ç–æ–¥—ñ–≤")

def analyze_image_quality(image_path):
    """
    –ê–Ω–∞–ª—ñ–∑—É—î —è–∫—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ –≤–∏–≤–æ–¥–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    """
    if not os.path.exists(image_path):
        return None
    
    img = cv2.imread(image_path)
    if img is None:
        return None
    
    # –ë–∞–∑–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    h, w = img.shape[:2]
    mean_brightness = np.mean(img)
    std_brightness = np.std(img)
    
    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä—ñ–∑–∫–æ—Å—Ç—ñ (Laplacian variance)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    laplacian_var = cv2.Laplacian(gray, cv2.CV_64F).var()
    
    return {
        'size': (w, h),
        'mean_brightness': mean_brightness,
        'std_brightness': std_brightness,
        'sharpness': laplacian_var
    }

def compare_results():
    """
    –ü–æ—Ä—ñ–≤–Ω—é—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ä—ñ–∑–Ω–∏—Ö –º–µ—Ç–æ–¥—ñ–≤
    """
    print("\n=== –ê–Ω–∞–ª—ñ–∑ —è–∫–æ—Å—Ç—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ ===")
    
    files_to_analyze = [
        ("–û—Ä–∏–≥—ñ–Ω–∞–ª", "face.png"),
        ("–¢—Ä–∞–¥–∏—Ü—ñ–π–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥", "result_traditional.jpg"),
        ("–ü–∞—Ç—á-–±–∞–∑–æ–≤–∞–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥", "result_patches.jpg")
    ]
    
    results = {}
    
    for name, file_path in files_to_analyze:
        stats = analyze_image_quality(file_path)
        if stats:
            results[name] = stats
            print(f"\n{name}:")
            print(f"  –†–æ–∑–º—ñ—Ä: {stats['size']}")
            print(f"  –°–µ—Ä–µ–¥–Ω—è —è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å: {stats['mean_brightness']:.1f}")
            print(f"  –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è: {stats['std_brightness']:.1f}")
            print(f"  –†—ñ–∑–∫—ñ—Å—Ç—å: {stats['sharpness']:.2f}")
        else:
            print(f"\n{name}: –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è")
    
    return results

def create_visual_comparison():
    """
    –°—Ç–≤–æ—Ä—é—î –≤—ñ–∑—É–∞–ª—å–Ω–µ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≤—Å—ñ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    """
    print("\n=== –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è ===")
    
    images = []
    titles = []
    
    for title, path in [("–û—Ä–∏–≥—ñ–Ω–∞–ª", "face.png"), 
                       ("–¢—Ä–∞–¥–∏—Ü—ñ–π–Ω–∏–π", "result_traditional.jpg"),
                       ("–ü–∞—Ç—á-–±–∞–∑–æ–≤–∞–Ω–∏–π", "result_patches.jpg")]:
        if os.path.exists(path):
            img = cv2.imread(path)
            if img is not None:
                # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ BGR –≤ RGB
                img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
                # –ó–º–µ–Ω—à—É—î–º–æ —Ä–æ–∑–º—ñ—Ä –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                img_resized = cv2.resize(img_rgb, (300, 300))
                images.append(img_resized)
                titles.append(title)
    
    if len(images) >= 2:
        fig, axes = plt.subplots(1, len(images), figsize=(15, 5))
        
        for i, (img, title) in enumerate(zip(images, titles)):
            axes[i].imshow(img)
            axes[i].set_title(title, fontsize=14, fontweight='bold')
            axes[i].axis('off')
        
        plt.tight_layout()
        plt.savefig("visual_comparison.png", dpi=300, bbox_inches='tight')
        plt.close()
        print("‚úì –í—ñ–∑—É–∞–ª—å–Ω–µ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ 'visual_comparison.png'")
    else:
        print("‚úó –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è")

if __name__ == "__main__":
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ EDSR –ø—Ä–æ–µ–∫—Ç—É")
    print("=" * 50)
    
    # –û—Å–Ω–æ–≤–Ω–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è
    demonstrate_patch_vs_traditional()
    
    # –ê–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    compare_results()
    
    # –í—ñ–∑—É–∞–ª—å–Ω–µ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
    create_visual_comparison()
    
    print("\n" + "=" * 50)
    print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüìÅ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å—Ç–≤–æ—Ä–µ–Ω—ñ —Ñ–∞–π–ª–∏:")
    print("- result_traditional.jpg")
    print("- result_patches.jpg") 
    print("- comparison_methods.jpg")
    print("- visual_comparison.png") 