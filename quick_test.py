#!/usr/bin/env python3
"""
–®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ EDSR –ø—Ä–æ–µ–∫—Ç—É
"""

import os
import sys
import torch
import cv2
import numpy as np
from models.edsr import EDSR
from config import Config

def test_model_creation():
    """–¢–µ—Å—Ç—É—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ"""
    print("üîß –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ...")
    
    try:
        cfg = Config()
        model = EDSR(
            upscale_factor=cfg.UPSCALE_FACTOR,
            num_blocks=cfg.NUM_BLOCKS,
            channels=cfg.CHANNELS
        )
        
        # –¢–µ—Å—Ç—É—î–º–æ forward pass
        test_input = torch.randn(1, 3, 48, 48)
        output = model(test_input)
        
        expected_size = (1, 3, 48 * cfg.UPSCALE_FACTOR, 48 * cfg.UPSCALE_FACTOR)
        
        if output.shape == expected_size:
            print("‚úÖ –ú–æ–¥–µ–ª—å —Å—Ç–≤–æ—Ä–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
            print(f"   –í—Ö—ñ–¥: {test_input.shape}")
            print(f"   –í–∏—Ö—ñ–¥: {output.shape}")
            return True
        else:
            print(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –≤–∏—Ö–æ–¥—É: {output.shape}, –æ—á—ñ–∫—É–≤–∞–ª–æ—Å—è: {expected_size}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ: {e}")
        return False

def test_data_preparation():
    """–¢–µ—Å—Ç—É—î –ø—ñ–¥–≥–æ—Ç–æ–≤–∫—É –¥–∞–Ω–∏—Ö"""
    print("\nüìä –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–∏—Ö...")
    
    try:
        from utils.dataset import SuperResolutionDataset
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        test_img = np.random.randint(0, 255, (100, 100, 3), dtype=np.uint8)
        os.makedirs("test_data/hr", exist_ok=True)
        os.makedirs("test_data/lr", exist_ok=True)
        cv2.imwrite("test_data/hr/test.png", test_img)
        cv2.imwrite("test_data/lr/test.png", test_img)
        
        # –¢–µ—Å—Ç—É—î–º–æ –¥–∞—Ç–∞—Å–µ—Ç
        dataset = SuperResolutionDataset(
            lr_dir="test_data/lr",
            hr_dir="test_data/hr",
            patch_size=48,
            num_patches_per_image=2
        )
        
        if len(dataset) > 0:
            lr_tensor, hr_tensor = dataset[0]
            print("‚úÖ –î–∞—Ç–∞—Å–µ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ")
            print(f"   –†–æ–∑–º—ñ—Ä –¥–∞—Ç–∞—Å–µ—Ç—É: {len(dataset)}")
            print(f"   LR tensor shape: {lr_tensor.shape}")
            print(f"   HR tensor shape: {hr_tensor.shape}")
            
            # –û—á–∏—â–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
            import shutil
            shutil.rmtree("test_data")
            return True
        else:
            print("‚ùå –î–∞—Ç–∞—Å–µ—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π")
            return False
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–∏—Ö: {e}")
        return False

def test_patch_processing():
    """–¢–µ—Å—Ç—É—î –æ–±—Ä–æ–±–∫—É –ø–∞—Ç—á—ñ–≤"""
    print("\nüîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏ –ø–∞—Ç—á—ñ–≤...")
    
    try:
        from predict import extract_patches, reconstruct_from_patches
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        test_img = np.random.randint(0, 255, (100, 100, 3), dtype=np.uint8)
        
        # –í–∏—Ä—ñ–∑–∞—î–º–æ –ø–∞—Ç—á—ñ
        patches, positions = extract_patches(test_img, patch_size=48)
        
        if len(patches) > 0:
            # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            reconstructed = reconstruct_from_patches(patches, positions, test_img.shape, patch_size=48)
            
            print("‚úÖ –û–±—Ä–æ–±–∫–∞ –ø–∞—Ç—á—ñ–≤ –ø—Ä–∞—Ü—é—î")
            print(f"   –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Ç—á—ñ–≤: {len(patches)}")
            print(f"   –†–æ–∑–º—ñ—Ä –æ—Ä–∏–≥—ñ–Ω–∞–ª—É: {test_img.shape}")
            print(f"   –†–æ–∑–º—ñ—Ä –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ–≥–æ: {reconstructed.shape}")
            return True
        else:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏—Ä—ñ–∑–∞—Ç–∏ –ø–∞—Ç—á—ñ")
            return False
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–∞—Ç—á—ñ–≤: {e}")
        return False

def test_configuration():
    """–¢–µ—Å—Ç—É—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é"""
    print("\n‚öôÔ∏è –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...")
    
    try:
        cfg = Config()
        
        required_attrs = [
            'PATCH_SIZE', 'NUM_PATCHES_PER_IMAGE', 'UPSCALE_FACTOR',
            'NUM_BLOCKS', 'CHANNELS', 'BATCH_SIZE', 'NUM_EPOCHS',
            'LEARNING_RATE', 'DEVICE', 'SAVE_INTERVAL', 'OUTPUT_DIR'
        ]
        
        missing_attrs = []
        for attr in required_attrs:
            if not hasattr(cfg, attr):
                missing_attrs.append(attr)
        
        if not missing_attrs:
            print("‚úÖ –í—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –ø—Ä–∏—Å—É—Ç–Ω—ñ")
            print(f"   –†–æ–∑–º—ñ—Ä –ø–∞—Ç—á–∞: {cfg.PATCH_SIZE}")
            print(f"   –§–∞–∫—Ç–æ—Ä –∑–±—ñ–ª—å—à–µ–Ω–Ω—è: {cfg.UPSCALE_FACTOR}")
            print(f"   –ü—Ä–∏—Å—Ç—Ä—ñ–π: {cfg.DEVICE}")
            return True
        else:
            print(f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏: {missing_attrs}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∏–π —Ç–µ—Å—Ç"""
    print("üöÄ –®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ EDSR –ø—Ä–æ–µ–∫—Ç—É")
    print("=" * 50)
    
    tests = [
        test_configuration,
        test_model_creation,
        test_data_preparation,
        test_patch_processing
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
        print()
    
    print("=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {passed}/{total} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        print("‚úÖ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è")
    else:
        print("‚ö†Ô∏è –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ")
        print("üîß –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 